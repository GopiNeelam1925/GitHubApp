// Generated by Dagger (https://google.github.io/dagger).
package com.piotr.xapo.fragment.details;

import com.piotr.xapo.api.GitHubApi;
import com.piotr.xapo.dao.DaoRepository;
import dagger.internal.Factory;
import javax.inject.Provider;

public final class DetailsPresenter_Factory implements Factory<DetailsPresenter> {
  private final Provider<Contract.View> viewProvider;

  private final Provider<GitHubApi> gitHubApiProvider;

  private final Provider<DaoRepository> repositoryProvider;

  public DetailsPresenter_Factory(
      Provider<Contract.View> viewProvider,
      Provider<GitHubApi> gitHubApiProvider,
      Provider<DaoRepository> repositoryProvider) {
    this.viewProvider = viewProvider;
    this.gitHubApiProvider = gitHubApiProvider;
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public DetailsPresenter get() {
    return provideInstance(viewProvider, gitHubApiProvider, repositoryProvider);
  }

  public static DetailsPresenter provideInstance(
      Provider<Contract.View> viewProvider,
      Provider<GitHubApi> gitHubApiProvider,
      Provider<DaoRepository> repositoryProvider) {
    return new DetailsPresenter(
        viewProvider.get(), gitHubApiProvider.get(), repositoryProvider.get());
  }

  public static DetailsPresenter_Factory create(
      Provider<Contract.View> viewProvider,
      Provider<GitHubApi> gitHubApiProvider,
      Provider<DaoRepository> repositoryProvider) {
    return new DetailsPresenter_Factory(viewProvider, gitHubApiProvider, repositoryProvider);
  }

  public static DetailsPresenter newDetailsPresenter(
      Contract.View view, GitHubApi gitHubApi, DaoRepository repository) {
    return new DetailsPresenter(view, gitHubApi, repository);
  }
}
