// Generated by Dagger (https://google.github.io/dagger).
package com.piotr.xapo.fragment.list;

import com.piotr.xapo.api.GitHubApi;
import com.piotr.xapo.dao.DaoRepository;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class ListModule_ProvidePresenterFactory implements Factory<Contract.Presenter> {
  private final ListModule module;

  private final Provider<GitHubApi> apiProvider;

  private final Provider<DaoRepository> repositoryProvider;

  public ListModule_ProvidePresenterFactory(
      ListModule module,
      Provider<GitHubApi> apiProvider,
      Provider<DaoRepository> repositoryProvider) {
    this.module = module;
    this.apiProvider = apiProvider;
    this.repositoryProvider = repositoryProvider;
  }

  @Override
  public Contract.Presenter get() {
    return provideInstance(module, apiProvider, repositoryProvider);
  }

  public static Contract.Presenter provideInstance(
      ListModule module,
      Provider<GitHubApi> apiProvider,
      Provider<DaoRepository> repositoryProvider) {
    return proxyProvidePresenter(module, apiProvider.get(), repositoryProvider.get());
  }

  public static ListModule_ProvidePresenterFactory create(
      ListModule module,
      Provider<GitHubApi> apiProvider,
      Provider<DaoRepository> repositoryProvider) {
    return new ListModule_ProvidePresenterFactory(module, apiProvider, repositoryProvider);
  }

  public static Contract.Presenter proxyProvidePresenter(
      ListModule instance, GitHubApi api, DaoRepository repository) {
    return Preconditions.checkNotNull(
        instance.providePresenter(api, repository),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
