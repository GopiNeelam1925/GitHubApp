// Generated by Dagger (https://google.github.io/dagger).
package com.piotr.xapo.fragment.list;

import com.piotr.xapo.di.ApplicationComponent;
import dagger.internal.Preconditions;

public final class DaggerListComponent implements ListComponent {
  private ListModule listModule;

  private ApplicationComponent applicationComponent;

  private DaggerListComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  private Contract.Presenter getPresenter() {
    return ListModule_ProvidePresenterFactory.proxyProvidePresenter(
        listModule,
        Preconditions.checkNotNull(
            applicationComponent.gitHubApi(),
            "Cannot return null from a non-@Nullable component method"),
        Preconditions.checkNotNull(
            applicationComponent.daoRepository(),
            "Cannot return null from a non-@Nullable component method"));
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.listModule = builder.listModule;
    this.applicationComponent = builder.applicationComponent;
  }

  @Override
  public void inject(ListFragment listFragment) {
    injectListFragment(listFragment);
  }

  private ListFragment injectListFragment(ListFragment instance) {
    ListFragment_MembersInjector.injectPresenter(instance, getPresenter());
    return instance;
  }

  public static final class Builder {
    private ListModule listModule;

    private ApplicationComponent applicationComponent;

    private Builder() {}

    public ListComponent build() {
      if (listModule == null) {
        throw new IllegalStateException(ListModule.class.getCanonicalName() + " must be set");
      }
      if (applicationComponent == null) {
        throw new IllegalStateException(
            ApplicationComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerListComponent(this);
    }

    public Builder listModule(ListModule listModule) {
      this.listModule = Preconditions.checkNotNull(listModule);
      return this;
    }

    public Builder applicationComponent(ApplicationComponent applicationComponent) {
      this.applicationComponent = Preconditions.checkNotNull(applicationComponent);
      return this;
    }
  }
}
